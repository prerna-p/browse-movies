{"version":3,"sources":["components/Navbar.js","components/Footer.js","components/SearchForm.js","actions/searchActions.js","actions/types.js","components/Landing.js","reducers/searchReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","id","Footer","href","target","rel","SearchForm","onChange","e","props","searchMovie","value","onSubmit","this","type","name","placeholder","Component","connect","state","text","movies","dispatch","payload","Landing","initialState","loading","movie","combineReducers","action","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mQA2BeA,MAzBf,WACE,OACE,6BACE,yBAAKC,UAAU,mCACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,iBAAf,iBAKA,wBAAIA,UAAU,gDACZ,wBAAIA,UAAU,gCACZ,uBAAGA,UAAU,oBAAoBC,GAAG,eAEtC,wBAAID,UAAU,gCACZ,uBAAGA,UAAU,6BCaZE,EA5BA,WAGb,OACE,6BACE,yBAAKF,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,kDAAf,gBAEE,0BAAMA,UAAU,mCARV,mBAMR,WAKU,uBAAGA,UAAU,iBALvB,uCAOE,uBACEG,KAAK,0BACLC,OAAO,SACPC,IAAI,uBAfD,kB,4BCAJC,EAAb,4MACEC,SAAW,SAAAC,GACT,EAAKC,MAAMC,YAAYF,EAAEJ,OAAOO,QAFpC,uDAKI,OACE,yBAAKX,UAAU,8CACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,kBACZ,uBAAGA,UAAU,iBADf,iCAGA,0BAAMC,GAAG,aAAaW,SAAUC,KAAKD,UACnC,2BACEE,KAAK,OACLd,UAAU,eACVe,KAAK,aACLC,YAAY,mBACZT,SAAUM,KAAKN,WAEjB,4BAAQO,KAAK,SAASd,UAAU,+BAAhC,iBAnBZ,GAAgCiB,aAkCjBC,eALS,SAAAC,GAAK,MAAK,CAGhCC,KAAMD,EAAME,OAAOD,QAEmB,CAAEV,YCpCf,SAACU,GAAD,OAAU,SAAAE,GACnCA,EAAS,CACPR,KCJwB,eDKxBS,QAASH,ODiCEF,CAA0CZ,GGzB1CkB,EAVf,uKAEI,OACE,yBAAKxB,UAAU,aACb,kBAAC,EAAD,WAJR,GAA6BiB,a,+BCDvBQ,EAAe,CACnBL,KAAM,GACNC,OAAQ,GACRK,SAAS,EACTC,MAAO,ICHMC,4BAAgB,CAC7BP,ODKa,WAAyC,IAA/BF,EAA8B,uDAAtBM,EAAcI,EAAQ,uCACrD,OAAQA,EAAOf,MACb,IFXwB,eEYtB,OAAO,2BACFK,GADL,IAEEC,KAAMS,EAAON,QACbG,SAAS,IAEb,QACE,OAAOP,MEbPW,EAAa,CAACC,KASLC,EANDC,sBACZC,EAHmB,GAKnBC,8BAAoBC,kBAAe,WAAf,EAAmBN,KCS1BO,MAZf,WACE,OACE,yBAAKrC,UAAU,OACb,kBAAC,IAAD,CAAUgC,MAAOA,GACf,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCFYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aba1638b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-dark bg-dark mb-5\">\r\n        <div className=\"container\">\r\n          <div className=\"navbar-header\">\r\n            {/* <Link className=\"navbar-brand text-white text-lg brand-text\" to=\"/\"> */}\r\n              Browse movies\r\n            {/* </Link> */}\r\n          </div>\r\n          <ul className=\"navbar-nav ml-auto text-light d-inline-block\">\r\n            <li className=\"nav-item d-inline-block mr-4\">\r\n              <i className=\"fab fa-imdb fa-5x\" id=\"imdb-logo\" />\r\n            </li>\r\n            <li className=\"nav-item d-inline-block mr-4\">\r\n              <i className=\"fas fa-video fa-5x\" />\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\n\r\nconst Footer = () => {\r\n  const devName = \" Prerna Purohit\";\r\n  const apiSrc = \" OMDb API\"\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <div className=\"footer p-3 mt-4 text-center bg-dark text-light\">\r\n            Developed By:\r\n            <span className=\"text-warning font-weight-normal\">\r\n              {devName}\r\n            </span>\r\n            , using <i className=\"fab fa-react\" /> React JS &amp; Redux JS\r\n            integrated with\r\n            <a\r\n              href=\"http://www.omdbapi.com/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              {apiSrc}\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { searchMovie } from '../actions/searchActions'\r\n\r\nexport class SearchForm extends Component {\r\n  onChange = e => {\r\n    this.props.searchMovie(e.target.value);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"jumbotron jumbotron-fluid mt-5 text-center\">\r\n        <div className=\"container\">\r\n          <h1 className=\"display-4 mb-3\">\r\n            <i className=\"fa fa-search\" /> Search for titles, genres...\r\n          </h1>\r\n          <form id=\"searchForm\" onSubmit={this.onSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"searchText\"\r\n              placeholder=\"a beautiful mind\"\r\n              onChange={this.onChange}\r\n            />\r\n            <button type=\"submit\" className=\"btn btn-primary btn-bg mt-3\">\r\n              Search\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  // state: global state of the application\r\n  // movies: combined reducer from reducers/index.js\r\n  text: state.movies.text,\r\n})\r\nexport default connect(mapStateToProps, { searchMovie })(SearchForm);\r\n","import { SEARCH_MOVIE } from './types'\r\n\r\nexport const searchMovie = (text) => dispatch => {\r\n  dispatch({\r\n    type: SEARCH_MOVIE,\r\n    payload: text,\r\n  })\r\n}","export const SEARCH_MOVIE = 'SEARCH_MOVIE';","import React, { Component } from 'react';\r\nimport SearchForm from './SearchForm';\r\n\r\nexport class Landing extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <SearchForm />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Landing\r\n","import { SEARCH_MOVIE } from '../actions/types';\r\n\r\nconst initialState = {\r\n  text: '',\r\n  movies: [],\r\n  loading: false,\r\n  movie: [],\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case SEARCH_MOVIE:\r\n      return {\r\n        ...state,\r\n        text: action.payload,\r\n        loading: false\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import { combineReducers } from 'redux';\r\nimport searchReducer from './searchReducer';\r\n\r\nexport default combineReducers({\r\n  movies: searchReducer\r\n});","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\r\nimport rootReducer from './reducers';\r\n\r\nconst middleware = [thunk];\r\nconst initialState = {};\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport Navbar from './components/Navbar'\nimport Footer from './components/Footer';\nimport Landing from './components/Landing';\nimport store from './store';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Navbar />\n        <Landing />\n        <Footer />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}